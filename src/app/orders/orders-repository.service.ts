import { Injectable } from "@angular/core";
import { Order, Question } from "./orders.model";
import { BehaviorSubject, map, of } from "rxjs";
import { HttpClient, HttpHeaders } from "@angular/common/http";
import { AuthService } from "../auth.service";
import { environment } from "src/environments/environment";

type OrdersResponse = { count: number; data: Order[] };
@Injectable({
    providedIn: "root",
})
export class OrdersRepositoryService {
    ordersList: Order[] = [];
    

    constructor(private http: HttpClient, private authSrv: AuthService) {
        this.ordersList = [
            // new Order('1', 'file 1', '–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º—ã', 'delayed'),
            // new Order('2', 'file 2', '–°—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ', 'processing'),
            // new Order('3', 'file 3', '–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ—Ç', 'complete')
        ];
    }

    getOrders$() {
        const url = environment.baseUrl + "/orders";
        // const token = this.authSrv.getToken();
        // const options = {
        //   headers: new HttpHeaders({
        //     "Authorization": `Bearer ${token}`
        //   })
        // }

        return this.http
            .get<OrdersResponse>(url)
            .pipe(
                map((response) =>
                    response.data
                        .map((order) => new Order(order))
                        .filter((order) => order.file)
                )
            );
    }

    getOrder$(id: string) {
        // const url = environment.baseUrl + "/orders/" + id.toString();
        const url = environment.baseUrl + "/orders/" + id.toString();
        // const token = this.authSrv.getToken();
        // const options = {
        //   headers: new HttpHeaders({
        //     "Authorization": `Bearer ${token}`
        //   })
        // }
        // return of(
        //     new Order({
        //         id: "3",
        //         celery_status: "processing",
        //         celery_task: "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
        //         date: "2023-04-12",
        //         description: "–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –∫–æ–º—É –Ω–∞–¥–æ –∑–∞–¥–∞—á–∞...",
        //         questions: [
        //             {
        //                 question: "–ó–∞–¥–∞—é –≤–æ–ø—Ä–æ—Å",
        //                 answer: "–ü–æ–ª—É—á–∞—é –æ—Ç–≤–µ—Ç",
        //                 conference_id: "3",
        //                 id: "10",
        //             },
        //         ],
        //         stenogram: `–ó–∞—Å–µ–¥–∞–Ω–∏–µ ‚Ññ1: –í–≤–µ–¥–µ–Ω–∏–µ   –ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å: –£–≤–∞–∂–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–≥–∏, –º—ã –Ω–∞—á–∏–Ω–∞–µ–º –Ω–∞—à–µ –∑–∞—Å–µ–¥–∞–Ω–∏–µ! –°–µ–≥–æ–¥–Ω—è –º—ã –æ–±—Å—É–¥–∏–º —Ä—è–¥ –≤–∞–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–æ–π. –ù–∞–¥–µ—é—Å—å, —á—Ç–æ –≤—Å–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≥–æ—Ç–æ–≤—ã –∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏. –ö–æ–ª–ª–µ–≥–∞ 1: –î–∞, –∫–æ–Ω–µ—á–Ω–æ, —è –≥–æ—Ç–æ–≤!
        // –ö–æ–ª–ª–µ–≥–∞ 2: –Ø —Ç–æ–∂–µ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å!
        // –ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å: –û—Ç–ª–∏—á–Ω–æ! –¢–æ–≥–¥–∞ –Ω–∞—á–Ω–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –í–æ–ø—Ä–æ—Å ‚Ññ1: –ß—Ç–æ —Ç–∞–∫–æ–µ ‚Äú—à—É—Ç–æ—á–Ω–æ–µ –∑–∞—Å–µ–¥–∞–Ω–∏–µ‚Äù?
        // –ö–æ–ª–ª–µ–≥–∞ 3: –≠—Ç–æ –∫–æ–≥–¥–∞ –º—ã –≤—Å–µ –≤–º–µ—Å—Ç–µ —Å–º–µ–µ–º—Å—è –∏ —à—É—Ç–∏–º!
        // (–°–º–µ—Ö –≤ –∑–∞–ª–µ)
        // –ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å: –•–æ—Ä–æ—à–æ, —ç—Ç–æ –±—ã–ª–æ –∑–∞–±–∞–≤–Ω–æ. –ù–æ –¥–∞–≤–∞–π—Ç–µ –≤—Å–µ –∂–µ –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –¥–∞—Ç—å –±–æ–ª–µ–µ —Å–µ—Ä—å–µ–∑–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ. –í–æ–ø—Ä–æ—Å ‚Ññ2: –ö–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–±–ª—é–¥–∞—Ç—å—Å—è –Ω–∞ —à—É—Ç–æ—á–Ω–æ–º –∑–∞—Å–µ–¥–∞–Ω–∏–∏?
        // –ö–æ–ª–ª–µ–≥–∞ 4: –ù–∞ —à—É—Ç–æ—á–Ω–æ–º –∑–∞—Å–µ–¥–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –Ω–∞—Ä—É—à–∞—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞!
        // (–ë—É—Ä–Ω—ã–µ –∞–ø–ª–æ–¥–∏—Å–º–µ–Ω—Ç—ã)
        // –ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å: –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–π–¥–µ–º –∫ –≤–æ–ø—Ä–æ—Å—É ‚Ññ3: –ö–∞–∫ –º—ã –º–æ–∂–µ–º —É–ª—É—á—à–∏—Ç—å –Ω–∞—à—É —Ä–∞–±–æ—Ç—É –Ω–∞ —à—É—Ç–æ—á–Ω–æ–º –∑–∞—Å–µ–¥–∞–Ω–∏–∏?
        // –ö–æ–ª–ª–µ–≥–∞ 5: –ú—ã –º–æ–∂–µ–º –ø—Ä–∏–¥—É–º–∞—Ç—å –Ω–æ–≤—ã–µ —à—É—Ç–∫–∏ –∏ —Å–º–µ—à–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏!
        // –ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å: –û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –ù–æ –¥–∞–≤–∞–π—Ç–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ —Ç–æ–º, —á—Ç–æ –Ω–∞—à–∞ –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ - —ç—Ç–æ –≤—Å–µ –∂–µ —Ä–∞–±–æ—Ç–∞.`,
        //         topic: "–¢–µ–º–∞ –≤—Å—Ç—Ä–µ—á–∏ —Å–∞–º–∞—è –æ–±—ã—á–Ω–∞—è",
        //         file: "fileName_example",
        //     })
        // );
        return this.http.get<any>(url);
    }

    getQuestion$(id: string) {
        // const url = environment.baseUrl + "/orders/" + id.toString();
        const url = environment.baseUrl + "/get_question/" + id.toString();
        return this.http.get<Question>(url);
    }

    postQuestion$(conference_id: string, question: string) {
        const url = environment.baseUrl + "/quests";
        return this.http.post<any>(url, {conference_id, question});
    }

    getFirstSummary$(order_id: string) {
        
        console.log("üöÄ ~ OrdersRepositoryService ~ order_id:", order_id)
        return of("–≠—Ç–æ —Å—Ç–µ–Ω–æ–≥—Ä–∞–º–º–∞ –ø–æ–ª—É—á–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞!!!")
    }
}
